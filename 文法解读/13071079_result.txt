测试用例1:
输入:0 0 15
输出:
无输出
分析: 编译时程序没有报错,说明常量声明,变量声明,函数声明,主函数声明是正确的. 同时也可以说明主函数中的if,switch和return被正确调用.

测试用例2:
输入:0 0 14
输出: 
0
分析: 测试有返回值的函数调用是否正确,覆盖了部分表达式和赋值语句的分支,测试return是否正确返回

测试用例6:
输入:1 0 15
输出:
>
>=
!=
分析:测试所有关系运算符是否正确

测试用例4:
输入:0 1 15
输出: 
b
分析: 测试返回值为字符型的数组是否可以正确运行

测试用例4:
输入:0 2 15
输出: 
b
分析: 测试字符串是否覆盖完全, printf的分支是否完全覆盖

测试用例5：
输入:0 6 15
输出: 8
分析: 递归调用斐波那契数列函数来测试函数的递归调用是否正确, 测试缺省值

测试用例6:
输入:3 0 15
输出: 
!#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}
-5
hello,_
分析: 测试字符串是否覆盖完全, printf的分支是否完全

测试用例7:
输入:0 2 15
输出:
0
1
2
3
分析: 循环语句以及数组的赋值语句被覆盖

至此,测试用例1~7覆盖了测试程序的所有可能分支,包括了所有的语法成分的所有可能选择.